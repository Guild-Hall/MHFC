buildscript {
    repositories {
        mavenCentral()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

allprojects {
    repositories { 
        jcenter()
        
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply from: 'build.properties'

minecraft {
    runDir = "run"
}

project.version = getVersion()
project.ext.shortVersion = getShortVersion()

minecraft {
    replace "@VERSION@", project.shortVersion
    replace "@MODID@", project.modid
    replace "@MODNAME@", project.longname
    replaceIn "MHFCReference.java"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand project.properties
    }
    
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

dependencies {
    testCompile 'junit:junit:4.12'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

tasks["sourceJar"].classifier = 'sources'

tasks.build.dependsOn('deobfJar', 'sourceJar')
tasks.install.dependsOn 'build'

artifacts {
    archives jar
    archives sourceJar
    archives deobfJar
}

test {
    testLogging {
        exceptionFormat "full"
    }
    afterTest { desc, result -> 
        println "${desc.className} > ${desc.name} ${result.resultType}"
    }
}

def getShortVersion() {
    def stdout = new ByteArrayOutputStream()
    exec {
        executable "git"
        args "rev-list", "--count", "HEAD"
        standardOutput = stdout
    }
    def revision = stdout.toString().trim()
    return "${major}.${minor}.${patch}.${revision}"
}

def getVersion() {
	return getShortVersion() + getArtifactID() + "+${minecraft.version}"
}

def getArtifactID() {
    def stdout = new ByteArrayOutputStream()
    exec {
        executable "git"
        args "rev-parse", "--abbrev-ref", "HEAD"
        standardOutput = stdout
    }
    def branch = stdout.toString().trim()
    if(branch == "HEAD") {
        stdout.reset()
        exec {
            executable "git"
            args "rev-parse", "--short", "HEAD"
            standardOutput = stdout
        }
        branch = stdout.toString().trim()
    }
	return branch == 'master' ? '' : '-' + branch.replaceAll('[^0-9A-Za-z-]', '-')
}

